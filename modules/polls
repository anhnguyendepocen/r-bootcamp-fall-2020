In general try to determine what will work or not work before you try to run the code.
Then use R to verify (or correct!) your understanding.

Module 1

How do I calculate the cosine of 2 pi?

- cosine(2pi)
- cosine(2*pi)
- cos(2 * pi)
- cos(2 x pi)
- cos(2*pi)
- cos(2 * 3.14159)

Which of these will work to extract a subset of a vector?
Assume the vector is created like this: vals <- rnorm(4)

vals[3]
vals[2,3]
vals[c(2,3)]
vals(2,3)
vals[c(FALSE, TRUE, TRUE, FALSE)]
vals[c(f,t,t,f)]
vals(3)


How would you extract "china" from this list?

- myList$moreStuff[1]
- myList$moreStuff[[1]]
- myList[[1]]
- myList[[3]][2]
- myList[[3]][1]
- myList[3][1]
- myList[['moreStuff']][1]


a) What do you think this will do?

ints <- 1:5
ints[0.9999]

- return an error
- return 1
- return an empty vector


b) What does the code do when it tries to use 0.9999 to subset?

- round the 0.9999 to 1
- truncate the 0.9999 to 0
- return an error

Module 2

Which of these is true?

`gap` is a data frame
`gap` is a matrix
`gap` is a vector
`gap` is a list
`gap` is a function

Suppose I am on a Mac that has the following directories:

Users
  paciorek
    Desktop
      r-bootcamp-fall-2020
        data
	modules
	schedule
    Documents

and suppose my current working directory is /Users/paciorek/Desktop/r-bootcamp-fall-2020/modules.
(Windows users, just think of this as being C:\Users\paciorek\Desktop\r-bootcamp-fall-2020\modules.)
Which of the following will allow me to change to the 'data' subdirectory?

setwd('Users/paciorek/Desktop/r-bootcamp-fall-2020/data')
setwd('/Users/paciorek/Desktop/r-bootcamp-fall-2020/data')
setwd('data')
setwd('../data')
setwd('~paciorek/Desktop/r-bootcamp-fall-2020/data')
setwd('paciorek', ' Desktop/r-bootcamp-fall-2020/data')
setwd('./data')
setwd('Desktop/r-bootcamp-fall-2020/data')

Module 3

Recall the gap dataframe has columns that are numeric and columns that are character strings.
What do you think will happen if we do this:
as.matrix(gap)

- it will convert to a matrix with no changes
- all numeric columns will be converted to character strings
- R will throw an error
- all character columns will be converted to numeric values
- R will drop some of the columns


Consider our matrix 'mat': mat <- matrix(1:16, nrow = 4, ncol = 4)
     [,1] [,2] [,3] [,4]
[1,]    1    5    9   13
[2,]    2    6   10   14
[3,]    3    7   11   15
[4,]    4    8   12   16

Suppose I run this code: mat[4]
What do you think will be returned?

- 13
- 4
- 13, 14, 15, 16
- 4, 8, 12, 16
- an error

(a) Consider the following vector:
vec <- c(3, NA, 7)

What is vec[2]:

- NA
- 7

(b) Consider this vector:
vec <- c(3, NULL, 7)

What is vec[2]:

- NULL
- NA
- 7
- 3

(c) Consider this list:

mylist <- list(3, NULL, 7)

What is mylist[[2]]:

- 7
- NULL
- NA
- 3

(d) Consider this code:

mylist <- list(3, 5, 7)
mylist[[2]] <- NULL

What is length(mylist):

- 3
- 2
- 1


a) Suppose I want to select the 3rd elements from the 2nd and 4th columns of a matrix or dataframe. Which syntax will work?
Here's a test matrix:

mat <- matrix(1:16, nrow = 4, ncol = 4)

- mat[3, (2, 4)]
- mat[c(FALSE, FALSE, TRUE, FALSE), c(FALSE, TRUE, FALSE, TRUE)]
- mat[c(FALSE, FALSE, TRUE, FALSE), c(2, 4)]
- mat[3, c(2, 4)]
- mat(3, c(2, 4))
- mat[3, ][c(2, 4)]
- mat[ , c(2, 4)][3, ]
- mat[ , c(2, 4)][3]
- mat[c(2, 4)][3, ]

b) (Advanced) One of those answers won't work with a matrix but will work with a dataframe. Which one?

- mat[3, (2, 4)]
- mat[c(FALSE, FALSE, TRUE, FALSE), c(FALSE, TRUE, FALSE, TRUE)]
- mat[c(FALSE, FALSE, TRUE, FALSE), c(2, 4)]
- mat[3, c(2, 4)]
- mat(3, c(2, 4))
- mat[3, ][c(2, 4)]
- mat[ , c(2, 4)][3, ]
- mat[ , c(2, 4)][3]
- mat[c(2, 4)][3, ]


Module 4:

2^3 is raising 2 to the power 3, so you get 8. 
What will this return?  (1:4)^(1:4)

- an error
- 1, 2, 3, 4
- 1, 4, 27, 256
- 1, 4, 9, 16
- 1, 16, 81, 256

What will this return?

vec1 <- c(1,2,3,4)
vec2 <- c(1,2)
vec1 + vec2

- 2, 4
- 2, 4, 5, 6
- 2, 4, 4, 6
- an error



What kind of object is produced by split, e.g., subsets <- split(gap,  gap$year)

- a dataframe
- a list
- a list of lists
- a list of dataframes
- some new kind of object we haven't encountered yet

Consider this regression model:
reg <- lm(formula = lifeExp ~ log(gdpPercap) + log(pop) + continent + year, 
                data = gap)

a) 'continent' could be:

 - numeric
 - character
 - factor
 - none of the above

b) 'year' should be:

 - numeric
 - factor
 - character
 - none of the above


Suppose you see this syntax when using the output of a regression:

reg$coefficients

The `reg` object is:
 - a list
 - a numeric vector
 - a dataframe
 - something else


Suppose you want know the probability of getting 4 or fewer heads when flipping a coin 10 times. Which of the following will work?

 - dbinom(4, size = 10, prob = 0.5)
 - pbinom(4, size = 10, prob = 0.5)
 - qbinom(4, size = 10, prob = 0.5)
 - pbinom(5, size = 10, prob = 0.5)
 - sum(dbinom(0:4, size = 10, prob = 0.5)
 - rbinom(1, size = 10, prob = 0.5)


Module 5

What do you think this will return:
sapply(1:6, function(n) rnorm(n))

- a list, like lapply
- a vector of 21 (1+2+3+4+5+6) elements
- an error


Which of these give exactly the same result: pi, 2*pi, 3*pi, ...?

- (1:n)*pi
- out <- rep(0, n); for(x in 1:n) out <- x*pi
- sapply(1:n, function(x) x*pi)
- out <- rep(0, n); for(x in 1:n) out[i] <- x*pi
- lapply(1:n, function(x) x*pi)
- sapply(1:n, `*`, pi)
- 1:n*pi

Which of these do you think will be fastest for a long vector, x?

- x <- exp(x)
- x <- sapply(x, exp)
- for(i in 1:length(x)) x[i] <- exp(x[i])


What will this return?
if(sqrt(-1) == 0i) {
   print('i')
} else print('not i')

- 'i'
- an error
- 'not i'



Module 6

Which of these will produce an error? (Assume 'continent' is a column in the data frame but not a stand-alone variable.)

- gap[ , 'continent']
- gap[ , continent]
- gap %>% select(gap, continent)
- gap %>% select(gap, 'continent')
- gap$continent
- gap$"continent"
- gap[[continent]]
- gap[['continent']]

Which of these has the same number of rows as the original gap dataframe?

- gap %>% group_by(continent) %>% mutate(mean_gdp = mean(gdpPercap))
- gap %>% group_by(continent) %>% summarize(mean_gdp = mean(gdpPercap))
- gap %>% group_by(continent) %>% summarize(mean_gdp = mean(gdpPercap)) %>% mutate(mean_gdpBillion = mean_gdp / 1e9)


Which of the 'wide' and 'long' objects do you prefer in terms of how the heartrate 'data' are formatted?

- wide
- long
- I'd format it some other way


Module 7

Which of these ggplot2 calls will work (in the sense of not giving an error, not in the sense of being a useful plot)?

- gap %>% ggplot(aes(x = gdpPercap, y = lifeExp)) %>% geom_point()
- gap %>% ggplot(aes(x = gdpPercap, y = lifeExp))
- gap %>% ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point()
- gap %>% ggplot(aes(x = gdpPercap, y = lifeExp, shape = 'a')) + geom_point()
- gap %>% ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(shape = country), show.legend = FALSE)
- gap %>% ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point(shape = 'a', show.legend = FALSE)
- gap %>% ggplot() + geom_point(aes(x = gdpPercap, y = lifeExp, shape = country), show.legend = FALSE)


Module 8

Have you used R's debugger?

- yes, some or a lot
- yes, a little bit
- no


Suppose you have a CSV file with one million rows and one thousand columns, filled with numbers. How much memory will this take up if you read the data into R?

- 800 MB
- 8 GB
- 1 GB
- 80 GB
- something else


Module 9

Have you used object-oriented programming in the past?

- Yes, I've done it in R (S3, S4, ReferenceClasses, or R6)
- Yes, in Python
- Yes, in Java
- Yes, in C++
- Yes, in some other language
- No


What kind of R object do you think is returned when you query a database using dbGetQuery?

- a list of dataframes
- a matrix
- a dataframe
- a list of vectors
- some sort of specialized object (recall that `lm()` returns a specialized object)


Have you used R's parallel processing capabilities?

- No
- Yes, I've used foreach
- Yes, I've used mclapply or parLapply
- Yes, I've used other tools from the parallel package
- Yes, I've used the future package
- Yes, I've used something else, not listed above

